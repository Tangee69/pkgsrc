# $NetBSD: subr_x86,v 1.5 2008/12/20 09:56:46 abs Exp $

# Apparently the only way to reliably determine the architecture of a recent
# Intel CPU is to use the cpu brand string - as they reused family and
# extended family bitflags... annoying
map_x86_brand_string()
    {
    case "$1" in
	"AMD-K6(tm)-III Processor"*) 		echo '-march=k6-3' ;;
	"Genuine Intel(R) CPU           T2400"*) echo '-march=core2' ;;
	"Intel(R) Celeron(R) CPU        E1400"*) echo '-march=core2' ;;
	"Intel(R) Celeron(R) CPU 2.40GHz")	echo '-march=pentium4' ;;
	"Intel(R) Celeron(TM) CPU                1400MHz") echo '-march=pentium3' ;;
	"Intel(R) Core(TM)2 CPU "*) 		echo '-march=core2' ;;
	"Intel(R) Core(TM)2 Duo CPU "*)		echo '-march=core2' ;;
	"Intel(R) Core(TM)2 Quad  CPU"*)	echo '-march=core2' ;;
	"Intel(R) Pentium(R) 4 CPU 2.80GHz")	echo '-march=pentium4' ;;
	"Intel(R) Pentium(R) 4 CPU 3.00GHz")	echo '-march=prescott' ;;
	"Intel(R) Pentium(R) D CPU "*)		echo '-march=prescott' ;;
	"Intel(R) Xeon(R) CPU            3040"*) echo '-march=core2' ;;
	"Intel(R) Xeon(R) CPU            3050"*) echo '-march=core2' ;;
	"Pentium(R) Dual-Core  CPU      E5200"*) echo '-march=core2' ;;

    esac
    }

flags_fixup_x86arch()
    {
    arch=$1
    features=$2
    # Fixup ARCH for x86
    #
    # The format of table is
    # feature:lowend_arch:fix_arch
    #
    $AWK -v "arch=${arch#-march=}" -v "features=$features" '
	BEGIN { split(features,ar); FS=":" }
	{ for (af in ar)
	  { if ((ar[af] == $1) && (arch == $3)) { print $2; exit;} }
	}
	' <<EOD
-msse:pentium3:i386
-msse:pentium3:i486
-msse:pentium3:i586
-msse:pentium3:i686
-msse:pentium3:pentium
-msse:pentium3:pentium-mmx
-msse:pentium3:pentiumpro
-msse:pentium3:pentium2
-msse:athlon:k6
-msse:athlon:k6-2
-msse:athlon:k6-3
-msse2:pentium4:i386
-msse2:pentium4:i386
-msse2:pentium4:i486
-msse2:pentium4:i586
-msse2:pentium4:i686
-msse2:pentium4:pentium
-msse2:pentium4:pentium-mmx
-msse2:pentium4:pentiumpro
-msse2:pentium4:pentium2
-msse2:pentium4:pentium3
-msse2:pentium4:pentium3m
-msse2:k8:k6
-msse2:k8:k6-2
-msse2:k8:k6-3
-msse2:k8:athlon
-msse2:k8:athlon-tbird
-msse2:k8:athlon-4
-msse2:k8:athlon-xp
-msse2:k8:athlon-mp
-msse3:prescott:i386
-msse3:prescott:i386
-msse3:prescott:i486
-msse3:prescott:i586
-msse3:prescott:i686
-msse3:prescott:pentium
-msse3:prescott:pentium-mmx
-msse3:prescott:pentiumpro
-msse3:prescott:pentium2
-msse3:prescott:pentium3
-msse3:prescott:pentium3m
-msse3:prescott:pentium-m
-msse3:prescott:pentium4
-msse3:prescott:pentium4m
-msse3:k8:k6
-msse3:k8:k6-2
-msse3:k8:k6-3
-msse3:k8:athlon
-msse3:k8:athlon-tbird
-msse3:k8:athlon-4
-msse3:k8:athlon-xp
-msse3:k8:athlon-mp
-m3dnow:athlon:k6
-m3dnow:athlon:k6-2
-m3dnow:athlon:k6-3
EOD

## in future
#-mssse3:nocona:prescott ...
#-msse4:nehalem:nocona ...
    }
