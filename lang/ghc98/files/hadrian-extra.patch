$NetBSD: hadrian-extra.patch,v 1.3 2025/01/27 15:08:07 pho Exp $

Allow it to build with GHC 9.8.x. Already fixed in upstream.

--- extra-1.7.12.orig/extra.cabal	2025-01-12 11:29:59.465902826 +0900
+++ extra-1.7.12/extra.cabal	2025-01-12 11:36:39.814907687 +0900
@@ -32,7 +32,7 @@
     default-language: Haskell2010
     hs-source-dirs: src
     build-depends:
-        base >= 4.9 && < 4.19,
+        base,
         directory,
         filepath,
         process,
--- extra-1.7.12.orig/src/Data/List/Extra.hs	2001-09-09 10:46:40.000000000 +0900
+++ extra-1.7.12/src/Data/List/Extra.hs	2025-01-12 11:38:17.127540438 +0900
@@ -1,4 +1,4 @@
-{-# LANGUAGE TupleSections, ConstraintKinds #-}
+{-# LANGUAGE CPP, TupleSections, ConstraintKinds #-}
 
 -- | This module extends "Data.List" with extra functions of a similar nature.
 --   The package also exports the existing "Data.List" functions.
@@ -156,6 +156,7 @@
 lastDef d xs = foldl (\_ x -> x) d xs -- I know this looks weird, but apparently this is the fastest way to do this: https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.List.html#last
 {-# INLINE lastDef #-}
 
+#if __GLASGOW_HASKELL__ <= 906
 -- | A total variant of the list index function `(!!)`.
 --
 -- > [2,3,4] !? 1    == Just 3
@@ -169,6 +170,7 @@
                                    0 -> Just x
                                    _ -> r (k-1)) (const Nothing) xs n
 {-# INLINABLE (!?) #-}
+#endif
 
 -- | A composition of 'not' and 'null'.
 --
@@ -187,6 +189,7 @@
 list nil cons [] = nil
 list nil cons (x:xs) = cons x xs
 
+#if __GLASGOW_HASKELL__ <= 906
 -- | If the list is empty returns 'Nothing', otherwise returns the 'init' and the 'last'.
 --
 -- > unsnoc "test" == Just ("tes",'t')
@@ -197,6 +200,7 @@
 unsnoc [x] = Just ([], x)
 unsnoc (x:xs) = Just (x:a, b)
     where Just (a,b) = unsnoc xs
+#endif
 
 -- | Append an element to the start of a list, an alias for '(:)'.
 --
@@ -286,7 +290,7 @@
 --
 -- > concatUnzip [("a","AB"),("bc","C")] == ("abc","ABC")
 concatUnzip :: [([a], [b])] -> ([a], [b])
-concatUnzip = (concat *** concat) . unzip
+concatUnzip = (concat *** concat) . Prelude.unzip
 
 -- | A merging of 'unzip3' and 'concat'.
 --
