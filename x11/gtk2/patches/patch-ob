$NetBSD: patch-ob,v 1.1 2008/12/15 11:17:47 rillig Exp $

Prevent an int-to-pointer-cast warning from gcc. The specification says
about gsize that "This type is wide enough to hold the numeric value of
a pointer", so there's no additional loss in converting a glong first to
gssize and later to (void *).

--- gtk/tests/object.c.orig	2008-10-17 06:06:13.000000000 +0200
+++ gtk/tests/object.c	2008-12-15 11:27:59.000000000 +0100
@@ -199,19 +199,19 @@ value_as_pointer (GValue *value)
   if (g_value_fits_pointer (value))
     return g_value_peek_pointer (value);
   if (G_VALUE_HOLDS_BOOLEAN (value))
-    return (void*) g_value_get_boolean (value);
+    return (void*) (gsize) g_value_get_boolean (value);
   if (G_VALUE_HOLDS_CHAR (value))
     return (void*) (gssize) g_value_get_char (value);
   if (G_VALUE_HOLDS_UCHAR (value))
     return (void*) (gsize) g_value_get_uchar (value);
   if (G_VALUE_HOLDS_INT (value))
-    return (void*) g_value_get_int (value);
+    return (void*) (gssize) g_value_get_int (value);
   if (G_VALUE_HOLDS_UINT (value))
-    return (void*) g_value_get_uint (value);
+    return (void*) (gsize) g_value_get_uint (value);
   if (G_VALUE_HOLDS_LONG (value))
-    return (void*) g_value_get_long (value);
+    return (void*) (gssize) g_value_get_long (value);
   if (G_VALUE_HOLDS_ULONG (value))
-    return (void*) g_value_get_ulong (value);
+    return (void*) (gsize) g_value_get_ulong (value);
   if (G_VALUE_HOLDS_FLOAT (value))
     return (void*) (gssize) g_value_get_float (value);
   if (G_VALUE_HOLDS_DOUBLE (value))
