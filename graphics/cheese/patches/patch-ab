$NetBSD: patch-ab,v 1.4 2008/12/02 11:47:09 wiz Exp $

--- src/cheese-webcam.c.orig	2008-11-24 23:03:19.000000000 +0000
+++ src/cheese-webcam.c
@@ -32,13 +32,24 @@
 #include <gst/gst.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <X11/Xlib.h>
+
+#if HAVE_HAL
 #include <libhal.h>
+#endif
 
-/* for ioctl query */
+#include <sys/ioctl.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <sys/ioctl.h>
+
+#if defined(__NetBSD__) || defined(__OpenBSD__)
+#include <sys/types.h>
+#include <sys/videoio.h>
+#elif defined(__sun)
+#include <sys/types.h>
+#include <sys/videodev2.h>
+#elif defined(__linux__)
 #include <linux/videodev.h>
+#endif
 
 #include "cheese-webcam.h"
 #include "cheese-flash.h"
@@ -244,6 +255,7 @@ cheese_webcam_bus_message_cb (GstBus *bu
   }
 }
 
+#if HAVE_HAL
 static void
 cheese_webcam_get_video_devices_from_hal (CheeseWebcam *webcam)
 {
@@ -306,7 +318,9 @@ cheese_webcam_get_video_devices_from_hal
     char                   *subsystem = NULL;
     char                   *gstreamer_src, *product_name;
     struct v4l2_capability  v2cap;
+#ifdef VIDIOCGCAP
     struct video_capability v1cap;
+#endif
     gint vendor_id = 0;
     gint product_id = 0;
     gchar *property_name = NULL;
@@ -368,6 +382,7 @@ cheese_webcam_get_video_devices_from_hal
     ok = ioctl (fd, VIDIOC_QUERYCAP, &v2cap);
     if (ok < 0)
     {
+#ifdef VIDIOCGCAP
       ok = ioctl (fd, VIDIOCGCAP, &v1cap);
       if (ok < 0)
       {
@@ -381,6 +396,13 @@ cheese_webcam_get_video_devices_from_hal
       g_print ("Device type: %d\n", v1cap.type);
       gstreamer_src = "v4lsrc";
       product_name  = v1cap.name;
+#else
+      g_error ("Error while probing v4l2 capabilities for %s: %s\n",
+	       device, strerror (errno));
+      libhal_free_string (device);
+      close (fd);
+      continue;
+#endif
     }
     else
     {
@@ -434,6 +456,55 @@ fallback:
     priv->webcam_devices[0].hal_udi = g_strdup ("cheese_fake_videodevice");
   }
 }
+#else
+static void
+cheese_webcam_get_video_devices_from_probe (CheeseWebcam *webcam)
+{
+  CheeseWebcamPrivate* priv = CHEESE_WEBCAM_GET_PRIVATE (webcam);
+  struct v4l2_capability caps;
+  gchar videodev[] = "/dev/video?";
+  guint16 cammask = 0;
+  int i, ncams = 0, fd, ret, cur = 0;
+
+  for (i = 0; i < 9; i++)
+  {
+    videodev[strlen(videodev) - 1] = '0' + i;
+    fd = open(videodev, O_RDONLY);
+    if (fd == -1)
+      continue;
+    ret = ioctl(fd, VIDIOC_QUERYCAP, &caps);
+    close(fd);
+    if (ret)
+    {
+      continue;
+    }
+    g_message("Found video device: %s\n", caps.card);
+    cammask |= (1 << i);
+    ++ncams;
+  }
+
+  priv->num_webcam_devices = ncams;
+  if (ncams == 0)
+    return;
+  priv->webcam_devices = g_new0 (CheeseWebcamDevice, ncams);
+  for (i = 0; i < ncams; i++)
+  {
+    priv->webcam_devices[i].num_video_formats = 0;
+    priv->webcam_devices[i].video_formats = g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
+  }
+
+  for (i = 0; i < 9; i++)
+  {
+    if (cammask & (1 << i))
+    {
+      videodev[strlen(videodev) - 1] = '0' + i;
+      priv->webcam_devices[i].video_device = g_strdup (videodev);
+      ++cur;
+    }
+  }
+}
+#endif /* !HAVE_HAL */
+
 
 static void
 cheese_webcam_get_supported_framerates (CheeseVideoFormat *video_format, GstStructure *structure)
@@ -739,7 +810,11 @@ cheese_webcam_detect_webcam_devices (Che
 
   int i;
 
+#if HAVE_HAL
   cheese_webcam_get_video_devices_from_hal (webcam);
+#else
+  cheese_webcam_get_video_devices_from_probe (webcam);
+#endif
 
   g_print ("Probing supported video formats...\n");
   for (i = 0; i < priv->num_webcam_devices; i++)
