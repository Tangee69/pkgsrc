$NetBSD: patch-ah,v 1.3 2008/06/19 14:52:36 taca Exp $

--- lib/rubygems.rb.orig	2008-04-10 06:18:31.000000000 +0900
+++ lib/rubygems.rb
@@ -71,7 +71,9 @@ module Gem
     :ruby_install_name => RbConfig::CONFIG["ruby_install_name"],
     :ruby_version => RbConfig::CONFIG["ruby_version"],
     :sitedir => RbConfig::CONFIG["sitedir"],
-    :sitelibdir => RbConfig::CONFIG["sitelibdir"]
+    :sitelibdir => RbConfig::CONFIG["sitelibdir"],
+    :vendordir => RbConfig::CONFIG["vendordir"],
+    :vendorlibdir => RbConfig::CONFIG["vendorlibdir"]
   )
 
   DIRECTORIES = %w[cache doc gems specifications] unless defined?(DIRECTORIES)
@@ -213,7 +215,13 @@ module Gem
   ##
   # The path where gem executables are to be installed.
 
-  def self.bindir(install_dir=Gem.dir)
+  def self.bindir(install_dir=Gem.dir, install_root=nil)
+    unless install_root.nil?
+      install_root_path = Pathname.new install_root
+      install_dir_path = Pathname.new install_dir
+      install_dir_path = install_dir_path.relative_path_from install_root_path
+      install_dir = install_dir_path.expand_path File::SEPARATOR
+    end
     return File.join(install_dir, 'bin') unless
       install_dir.to_s == Gem.default_dir
     Gem.default_bindir
@@ -389,7 +397,7 @@ module Gem
   # so you can override the gem_prelude.rb default $LOAD_PATH paths.
 
   def self.load_path_insert_index
-    index = $LOAD_PATH.index ConfigMap[:sitelibdir]
+    index = $LOAD_PATH.index ConfigMap[:vendorlibdir]
 
     $LOAD_PATH.each_with_index do |path, i|
       if path.instance_variables.include?(:@gem_prelude_index) or
@@ -474,7 +482,8 @@ module Gem
   def self.prefix
     prefix = File.dirname File.expand_path(__FILE__)
 
-    if File.dirname(prefix) == File.expand_path(ConfigMap[:sitelibdir]) or
+    if File.dirname(prefix) == File.expand_path(ConfigMap[:vendorlibdir]) or
+       File.dirname(prefix) == File.expand_path(ConfigMap[:sitelibdir]) or
        File.dirname(prefix) == File.expand_path(ConfigMap[:libdir]) or
        'lib' != File.basename(prefix) then
       nil
